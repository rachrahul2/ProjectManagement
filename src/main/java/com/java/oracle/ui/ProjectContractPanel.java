package com.java.oracle.ui;

import com.java.oracle.dao.ContractDAO;
import com.java.oracle.dao.ProjectContractDAO;
import com.java.oracle.dao.ProjectDAO;
import com.java.oracle.entity.Contract;
import com.java.oracle.entity.Project;
import com.java.oracle.entity.ProjectContract;
import com.java.oracle.ui.event.BeforeSaveEvent;
import com.java.oracle.ui.event.SaveEvent;
import com.java.oracle.ui.event.SavedEventData;
import com.java.oracle.utils.ValidateUtils;
import com.java.oracle.vo.ComboItem;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

public class ProjectContractPanel extends AbstractPanel<ProjectContract>
        implements SaveEvent<ProjectContract>, BeforeSaveEvent {

    private final ProjectContractDAO projectContractDAO;
    private final ContractDAO contractDAO;
    private final ProjectDAO projectDAO;
    private DefaultComboBoxModel cboContractModel;
    private DefaultComboBoxModel cboProjectModel;

    /**
     * Creates new form ProjectContractPanel
     */
    public ProjectContractPanel() {
        initComponents();
        projectContractDAO = new ProjectContractDAO(ProjectContract.class);
        setAbstractDAO(projectContractDAO);
        contractDAO = new ContractDAO(Contract.class);
        projectDAO = new ProjectDAO(Project.class);
        cboContractModel = new DefaultComboBoxModel();
        cboContract.setModel(cboContractModel);
        cboProjectModel = new DefaultComboBoxModel();
        cboProject.setModel(cboProjectModel);
        
        cboContract.addItemListener((itemEvent) -> {
            if(itemEvent.getStateChange() == ItemEvent.SELECTED) {
                ComboItem item = (ComboItem) itemEvent.getItem();
                Contract contract = contractDAO.getById(item.getId());
                txtRemain.setText(contract.getRemainValue().toString());
            }
        });
        loadCombo();
        setAfterSaveEvent(this);
        setBeforeSaveEvent(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cboContract = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        cboProject = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        txtRemain = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtValue = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDescription = new javax.swing.JTextArea();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("ASSIGN PROJECT");

        jLabel2.setText("Contract");

        cboContract.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel3.setText("Project");

        cboProject.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel4.setText("Remain");

        txtRemain.setEnabled(false);

        jLabel5.setText("Value");

        jLabel6.setText("Description");

        txtDescription.setColumns(20);
        txtDescription.setRows(5);
        jScrollPane1.setViewportView(txtDescription);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtRemain)
                            .addComponent(cboContract, 0, 191, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cboProject, 0, 191, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(txtValue))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel2, jLabel4, jLabel6});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cboContract, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(cboProject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtRemain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(txtValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cboContract;
    private javax.swing.JComboBox<String> cboProject;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtDescription;
    private javax.swing.JTextField txtRemain;
    private javax.swing.JTextField txtValue;
    // End of variables declaration//GEN-END:variables

    @Override
    public ProjectContract prepareData() {
        if (bean == null) {
            bean = new ProjectContract();
        }
        Contract contract = contractDAO.getById(((ComboItem) cboContract.getSelectedItem()).getId());
        bean.setContractId(contract.getId());
        Project p = projectDAO.getById(((ComboItem) cboProject.getSelectedItem()).getId());
        bean.setProjectId(p.getId());
        bean.setUsedValue(Double.valueOf(txtValue.getText()));
        bean.setDescription(txtDescription.getText());
        return bean;
    }

    @Override
    public boolean validateData() {
        if (cboContract.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(null, "Contract is mandatory!");
            return false;
        }
        if (cboProject.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(null, "Project is mandatory!");
            return false;
        }
        if (txtValue.getText() == null || !ValidateUtils.isNumber(txtValue.getText())) {
            JOptionPane.showMessageDialog(null, "Enter number value!");
            return false;
        }
        ComboItem projectItem = (ComboItem) cboProject.getSelectedItem();
        if(bean != null && bean.getId() != null && bean.getId() > 0) {
            if(projectItem.getId().longValue() != bean.getProjectId().longValue()) {
                if (projectContractDAO.checkContract(projectItem.getId()) > 0) {
                    JOptionPane.showMessageDialog(null, "This project was added to other contract!");
                    return false;
                }
            }
        } else if(bean == null) {
            if(projectContractDAO.checkContract(projectItem.getId()) > 0) {
                JOptionPane.showMessageDialog(null, "This project was added to other contract!");
                return false;
            }
        }
        ComboItem contractItem = (ComboItem) cboContract.getSelectedItem();
        Contract contract = contractDAO.getById(contractItem.getId());
        Double used = Double.valueOf(txtValue.getText());
        if (bean != null) {
            if (contract != null) {
                if (contract.getRemainValue() + bean.getUsedValue() - used < 0) {
                    JOptionPane.showMessageDialog(null, "Remain value must greater than 0.");
                    txtValue.requestFocus();
                    return false;
                }
            }
        } else {
            if (contract.getRemainValue() - used < 0) {
                JOptionPane.showMessageDialog(null, "Remain value must greater than 0.");
                txtValue.requestFocus();
                return false;
            }
        }
        return true;
    }

    @Override
    public void loadData() {
        if (bean != null) {
            txtValue.setText(bean.getUsedValue().toString());
            if (bean.getContractId() != null) {
                Contract c = contractDAO.getById(bean.getContractId());
                if (c != null) {
                    for (int i = 0; i < cboContractModel.getSize(); i++) {
                        if (c.getId().equals(((ComboItem) cboContractModel.getElementAt(i)).getId())) {
                            cboContract.setSelectedIndex(i);
                            break;
                        }
                    }
                }
            }
            if (bean.getProjectId() != null) {
                Project p = projectDAO.getById(bean.getProjectId());
                if (p != null) {
                    for (int i = 0; i < cboProjectModel.getSize(); i++) {
                        if (p.getId().equals(((ComboItem) cboProjectModel.getElementAt(i)).getId())) {
                            cboProject.setSelectedIndex(i);
                            break;
                        }
                    }
                }
            }
            txtDescription.setText(bean.getDescription());
        }

    }

    @Override
    public void afterSave(SavedEventData data) {
        ProjectContract projectContract = (ProjectContract) data.getData();
        Contract contract = contractDAO.getById(projectContract.getContractId());
        if (contract != null) {
            contract.setRemainValue(contract.getRemainValue() - projectContract.getUsedValue());
            contractDAO.update(contract);
        }
        Project project = projectDAO.getById(projectContract.getProjectId());
        if(project != null) {
            project.setStatus("On-going");
            projectDAO.update(project);
        }
    }

    private void loadCombo() {
        List<Contract> contracts = contractDAO.selectAll();
        if (contracts != null) {
            for (Contract c : contracts) {
                cboContractModel.addElement(new ComboItem(c.getId(), c.getContractCode()));
            }
        }
        List<Project> projects = projectDAO.selectAll();
        if (projects != null) {
            for (Project p : projects) {
                cboProjectModel.addElement(new ComboItem(p.getId(), p.getProjectCode()));
            }
        }
    }

    @Override
    public void beforeSave() {
        if (bean != null && bean.getId() != null && bean.getId() > 0) {
            Contract contract = contractDAO.getById(bean.getContractId());
            if (contract != null) {
                contract.setRemainValue(contract.getRemainValue() + bean.getUsedValue());
                contractDAO.update(contract);
            }
            Project project = projectDAO.getById(bean.getProjectId());
            if(project != null) {
                project.setStatus("Open");
                projectDAO.update(project);
            }
        }
    }
}
